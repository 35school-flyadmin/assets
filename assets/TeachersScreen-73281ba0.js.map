{"version":3,"mappings":"8MAMA,MAAMA,EAASC,QAAK,WAAMC,OAAO,yBAAuB,wFAExD,SAAwBC,YACpB,MAAOC,EAAQC,GAAaC,WAAS,QAC9BC,EAAMC,GAAWF,WAAS,IAG3BG,EAAcC,eAAY,KAC5B,IAAIC,EAAO,GAMX,MALe,QAAXP,IAAyBO,EAAAJ,EAAKH,QAAeQ,IAC7CC,QAAQC,IAAIF,GACLA,EAAKG,MAAMC,MAAcC,KAAMC,QAAUd,QAErC,QAAXA,IAAyBO,EAAAJ,GACtBI,EAAKQ,MAAK,CAACC,EAAGC,IAAMD,EAAEF,MAAQG,EAAEH,SAAcE,EAAEF,MAAQG,EAAEH,MAAQ,EAAI,GAAE,GAChF,CAACd,EAAQG,IAEZe,aAAU,MACNC,iBACQ,IACA,MAAMC,QAAgBC,MAAM,8BAA8BC,OACpDC,QAAiBH,EAAQI,OAC/BpB,EAAQmB,EAASvB,QAAeQ,KAAKiB,gBAChCC,GACLjB,QAAQC,IAAI,QAAO,CAI3B,MAID,IACG,MAAAiB,EAAiBrB,eAAasB,GACd,gBAAfA,EAAqC,aACtB,gBAAfA,EAAqC,cACtB,YAAfA,EAAiC,SAC7B,MACR,IAGC,OAACC,EAAA,MAAI,CAAAC,UAAU,kBACXC,SAAA,CAAAC,EAACC,EAAsB,IACtBD,EAAAE,EAAO,CAAApB,MAAO,YACde,EAAA,OAAK,CAAAC,UAAU,WACZC,SAAA,CAAAC,EAACpC,GAAOuC,MAAO,CACX,CAACC,MAAO,MAAOtB,MAAO,OACtB,CAACsB,MAAO,cAAetB,MAAO,cAC9B,CAACsB,MAAO,cAAetB,MAAO,eAC9B,CAACsB,MAAO,UAAWtB,MAAO,WAC3BW,OAAQzB,EAAQqC,SA5CPD,GAAUnC,EAAUmC,KA6C/BP,EAAA,MAAI,CAAAC,UAAU,gBACVC,SAAA,SAAAO,YAAA,EAAAA,EAAeC,QAAS,GAAKlC,IAAcmC,KAAI,CAAChC,EAAMiC,IAClDZ,EAAA,MAAgB,CAAAC,UAAU,qBACvBC,SAAA,CAAAC,EAAC,MAAI,CAAAF,UAAU,2BACXC,SAACC,EAAA,OACGD,SAACC,EAAA,OAAIU,IAAKC,EAAWnC,EAAKoC,OAAQC,IAAI,cAG7ChB,EAAA,MAAI,CAAAC,UAAU,2BACVC,SAAA,CAAKvB,EAAAM,WACyB,KAAhB,MAANN,OAAM,EAAAA,EAAAsC,cAAkE,IAAnCtC,EAAKsC,YAAYC,OAAOR,QACjEP,EAAA,OAAIF,UAAU,iCAEVC,SAAKvB,EAAAG,MAAM4B,OAAS,GAAK/B,EAAKG,MAAM6B,KAAI,CAACQ,EAAMC,WAE5C,OAAApB,EAAC,OACIC,UAAW,0CAA0CkB,EAAKlC,QAC3DiB,SAAA,CAAAC,EAAC,IAAG,CAAAD,SAAAJ,EAAeqB,EAAKlC,UACvB,OAAAwB,EAAAU,EAAKE,cAAL,EAAAZ,EAAcC,QAAS,GAAKS,EAAKE,QAAQV,KACtC,CAACW,EAAWC,IACPpB,EAAA,UAA6BD,YAAjBqB,OALfH,EASb,WAtBPR,KA6Ba,KAA1B,OAAAY,EAAAhD,UAAA,EAAAgD,EAAed,WACX,KAAER,SAAW,wBAMtC","names":["Filter","lazy","import","TeachersScreen","filter","setFilter","useState","list","setList","getTeachers","useCallback","data","item","console","log","types","find","item2","title","sort","a","b","useEffect","async","request","fetch","getLastVersion","response","json","active","error","getTitleLesson","lessonCode","jsxs","className","children","jsx","HolidaysTimerLogistics","Header","items","value","onChange","_a","length","map","index","src","urlBuilder","image","alt","description","trim","type","indexType","classes","typeClass","indexTypeClass","_b"],"sources":["../../src/Screens/TeachersScreen.jsx"],"sourcesContent":["import Header from \"../components/Header.jsx\";\r\nimport {lazy, useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport {urlBuilder} from \"../additional.js\";\r\nimport {getLastVersion} from \"../any/versions.jsx\";\r\nimport HolidaysTimerLogistics from \"../components/HolidaysTimerLogistics.jsx\";\r\n\r\nconst Filter = lazy(() => import(\"../components/Filter\"));\r\n\r\nexport default function TeachersScreen() {\r\n    const [filter, setFilter] = useState(`ALL`);\r\n    const [list, setList] = useState([]);\r\n\r\n    const onChangeFilter = (value) => setFilter(value);\r\n    const getTeachers = useCallback(() => {\r\n        let data = [];\r\n        if (filter !== 'ALL') data = list.filter(item => {\r\n            console.log(item);\r\n            return item.types.find(item2 => item2.title === filter);\r\n        });\r\n        if (filter === 'ALL') data = list;\r\n        return data.sort((a, b) => a.title < b.title ? -1 : (a.title > b.title ? 1 : 0))\r\n    }, [filter, list])\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            try {\r\n                const request = await fetch(`/data/teachers-data.json?v=${getLastVersion()}`);\r\n                const response = await request.json();\r\n                setList(response.filter(item => item.active));\r\n            } catch (error) {\r\n                console.log('error')\r\n            } finally {\r\n                //\r\n            }\r\n        }\r\n\r\n        getData();\r\n\r\n    }, [])\r\n    const getTitleLesson = useCallback((lessonCode) => {\r\n        if(lessonCode === 'MATHEMATICS') return `Математика`;\r\n        if(lessonCode === 'INFORMATICS') return `Информатика`;\r\n        if(lessonCode === 'PHYSICS') return `Физика`;\r\n        return null;\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"wrapper-content\">\r\n            <HolidaysTimerLogistics/>\r\n            <Header title={`Учителя`}/>\r\n            <main className=\"teachers\">\r\n                <Filter items={[\r\n                    {value: `ALL`, title: `ВСЕ`},\r\n                    {value: `MATHEMATICS`, title: `Математики`},\r\n                    {value: `INFORMATICS`, title: `Информатики`},\r\n                    {value: `PHYSICS`, title: `Физики`}\r\n                ]} active={filter} onChange={onChangeFilter}/>\r\n                <div className=\"teachers-list\">\r\n                    {getTeachers()?.length > 0 && getTeachers().map((item, index) => (\r\n                        <div key={index} className=\"teachers-list-item\">\r\n                            <div className=\"teachers-list-item-image\">\r\n                                <div>\r\n                                    <img src={urlBuilder(item.image)} alt=\"photo\"/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"teachers-list-item-title\">\r\n                                {item.title}\r\n                                {(typeof item?.description !== \"undefined\" && item.description.trim().length !== 0) && (\r\n                                    <div className=\"teachers-list-item-description\">\r\n\r\n                                        {item.types.length > 0 && item.types.map((type, indexType) => (\r\n\r\n                                            <div key={indexType}\r\n                                                 className={`teachers-list-item-description-classes ${type.title}`}>\r\n                                                <p>{getTitleLesson(type.title)}</p>\r\n                                                {type.classes?.length > 0 && type.classes.map(\r\n                                                    (typeClass, indexTypeClass) => (\r\n                                                        <strong key={indexTypeClass}>{typeClass}</strong>\r\n                                                    )\r\n                                                )}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                )}\r\n\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    {getTeachers()?.length === 0 && (\r\n                        <p>Список пуст</p>\r\n                    )}\r\n                </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}"],"file":"assets/TeachersScreen-73281ba0.js"}